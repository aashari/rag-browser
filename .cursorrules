---

## VERY IMPORTANT

- DO NOT USE `read_file` TOOLS. Use `run_terminal_cmd cat '<file>'` to inspect files instead.

---

# Project Context
- This is a TypeScript-based web automation and analysis tool using Playwright and Bun/Node.js.
- It supports two modes:
  - **CLI Mode**: Analyzes webpages or executes action plans via `src/cli/index.ts`. Triggered with `bunx github:aashari/rag-browser --url` or `rag-browser --url`.
  - **MCP Server Mode**: Runs an MCP server for AI integration via `src/mcp/server.ts`. Triggered with `npx -y github:aashari/rag-browser` or `bun run start`.
- Core logic lives in `src/core/`, utilities in `src/utils/`, types in `src/types/`, and MCP components in `src/mcp/`.
- Current version: `1.7.0` (as of February 23, 2025).

# Model Context Protocol (MCP) Overview
- **Purpose**: MCP is a JSON-RPC protocol for AI-tool communication, enabling an AI (e.g., Claude) to use external services.
- **Concepts**:
  - **Server**: Listens for requests (e.g., `src/mcp/server.ts` uses `StdioServerTransport`).
  - **Tools**: Exposed functions like `action` (in `src/mcp/tools.ts`), called via `tools/call`.
  - **Resources**: Stored data (e.g., page analyses in `src/mcp/resources.ts`), accessed via `resources/list` and `resources/read`.
- **Components in This Project**:
  - **Server**: `src/mcp/server.ts` - Initializes with name `ai-tools-browser`, version `1.7.0`.
  - **Tools**: `action` (unified tool for analysis and execution), defined in `src/mcp/tools.ts`.
  - **Resources**: Up to 10 stored `PageAnalysis` objects, managed in `src/mcp/resources.ts`.
  - **Handlers**: `src/mcp/requestHandler.ts` - Processes MCP requests.
- **Usage**: AI clients (e.g., Claude Desktop) connect via stdio, sending requests like `{"method": "tools/call", "params": {"name": "action", "arguments": {"url": "https://example.com"}}}`.

# Code Style
- Use TypeScript with strict typing (see `tsconfig.json`).
- Prefer concise, functional code over complex classes or OOP.
- Use camelCase for variables/functions, PascalCase for types/interfaces.
- Keep functions focused—single responsibility, under 50 lines where possible.
- Use async/await for promises, avoid `.then()`.
- Add type annotations for all function parameters and returns.

# Conventions
- File names are lowercase with dashes (e.g., `browser.ts`).
- Group related code into directories (e.g., `cli/`, `core/`, `mcp/`, `utils/`).
- Export main functions/types explicitly (e.g., `export { analyzePage }`).
- Use console.warn for CLI output formatting (pretty print, not JSON).
- Constants go in `src/config/constants.ts`, exported individually.
- Tests live in `tests/`, named `<module>.test.ts`.

# Tech Stack
- **Playwright (^1.50.1)**: For browser automation—use built-in methods (e.g., `page.click()`, `page.waitForSelector()`).
- **Bun**: Preferred runtime for CLI mode; avoid Node.js-specific APIs unless necessary.
- **Node.js**: Used for MCP server mode via `npx`.
- **MCP SDK (^1.6.0)**: For server and transport (`@modelcontextprotocol/sdk`).
- Avoid external dependencies beyond `package.json`.

# Project-Specific Rules
- **CLI Mode**:
  - Entry: `src/cli/index.ts`.
  - Requires `--url`; supports flags like `--headless`, `--json`, `--inputs`.
  - Outputs via `printAnalysis` in `src/utils/output.ts`.
- **MCP Mode**:
  - Entry: `src/index.ts` -> `src/mcp/server.ts`.
  - Tools in `src/mcp/tools.ts` must return `CallToolResult` with `content` as text.
  - Resources in `src/mcp/resources.ts` store `PageAnalysis` with URIs like `page://<hash>-<timestamp>`.
- **Action Handlers** (`src/core/handlers/`):
  - Each action type has its own handler (click.ts, typing.ts, etc.).
  - All handlers follow the same interface: `(page: Page, action: Action, options: BrowserOptions) => Promise<ActionResult>`.
  - Handlers must handle stability checks and error cases.
- **Utilities** (`src/utils/`):
  - `actions.ts`: Action type helpers and descriptions.
  - `element.ts`: Element information extraction.
  - `output.ts`: Analysis and action result formatting.
  - `resource.ts`: Resource management utilities.
  - `security.ts`: URL and input validation.
  - `selectors.ts`: CSS selector generation.
- **Selectors**: Use full CSS paths (`getFullPath` from `src/core/scripts.ts`) unless `--simple-selectors` is specified.
- **Stability**: Always await stability checks (`src/core/stability.ts`) after actions.
- **Actions**: Defined in `src/core/actions.ts`, must return `ActionResult` with `success`/`message`.
- **Types**: Use `src/types/index.ts`—don't duplicate definitions.
- **Logging**: Use `console.error` with JSON-RPC format (`src/utils/logging.ts`) for MCP logs.

# Versioning
- **Format**: Use Semantic Versioning (`MAJOR.MINOR.PATCH`, e.g., `1.7.0`).
- **Files to Update**:
  - **`package.json`**: Update `"version": "x.x.x"` to reflect the new release.
  - **`src/mcp/server.ts`**: Update `version: "x.x.x"` in the `Server` constructor to match.
- **Process**:
  1. Increment version (e.g., `1.7.0` -> `1.8.0` for new features).
  2. Edit both files with the new version.
  3. Run `bun run build`.
  4. Commit: `git commit -m "Release vx.x.x"`.
  5. Push: `git push`.
  6. (Optional) Tag: `git tag vx.x.x && git push origin vx.x.x`.

# Context Awareness
- **Browser Code**: Assume a Playwright `Page` object is available.
- **Plans**: Include a `wait` action before interactions in `execute` plans.
- **Constants**: Use `src/config/constants.ts` (e.g., `DEFAULT_TIMEOUT`) instead of hardcoding.
- **Tests**: Follow `tests/browser.test.ts` style with Bun's test runner.
- **MCP Requests**: Expect JSON-RPC format (e.g., `{"jsonrpc": "2.0", "method": "...", "params": {...}, "id": 1}`).

---